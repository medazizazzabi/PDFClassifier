!(function () {
  window;
  const e = document.documentElement;
  if (
    (e.classList.remove("no-js"),
    e.classList.add("js"),
    document.body.classList.contains("has-animations"))
  ) {
    (window.sr = ScrollReveal()).reveal(".feature, .pricing-table-inner", {
      duration: 600,
      distance: "20px",
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      origin: "bottom",
      interval: 100,
    }),
      e.classList.add("anime-ready"),
      anime
        .timeline({ targets: ".hero-figure-box-05" })
        .add({
          duration: 400,
          easing: "easeInOutExpo",
          scaleX: [0.05, 0.05],
          scaleY: [0, 1],
          perspective: "500px",
          delay: anime.random(0, 400),
        })
        .add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 })
        .add({
          duration: 800,
          rotateY: "-15deg",
          rotateX: "8deg",
          rotateZ: "-1deg",
        }),
      anime
        .timeline({ targets: ".hero-figure-box-06, .hero-figure-box-07" })
        .add({
          duration: 400,
          easing: "easeInOutExpo",
          scaleX: [0.05, 0.05],
          scaleY: [0, 1],
          perspective: "500px",
          delay: anime.random(0, 400),
        })
        .add({ duration: 400, easing: "easeInOutExpo", scaleX: 1 })
        .add({ duration: 800, rotateZ: "20deg" }),
      anime({
        targets:
          ".hero-figure-box-01, .hero-figure-box-02, .hero-figure-box-03, .hero-figure-box-04, .hero-figure-box-08, .hero-figure-box-09, .hero-figure-box-10",
        duration: anime.random(600, 800),
        delay: anime.random(600, 800),
        rotate: [
          anime.random(-360, 360),
          function (e) {
            return e.getAttribute("data-rotation");
          },
        ],
        scale: [0.7, 1],
        opacity: [0, 1],
        easing: "easeInOutExpo",
      });
  }
})();

const scrollContainer = document.querySelector(".slider");
const prevButtons = document.getElementsByClassName("prevBtn");
const nextButtons = document.getElementsByClassName("nextBtn");

let currentSlide = 0;
let slideWidth = window.innerWidth; // Initialize slide width

// Button click event handlers
[...prevButtons].forEach((e) => {
  e.addEventListener("click", () => changeSlide(-1));
  e.addEventListener("click", (e) => e.preventDefault());
});

[...nextButtons].forEach((e) => {
  e.addEventListener("click", () => changeSlide(1));
  e.addEventListener("click", (e) => e.preventDefault());
});

// Recalculate slide width when the window is resized
window.addEventListener("resize", () => {
  slideWidth = window.innerWidth;
  updateSlidePosition(); // Update the slide position after resizing
});

// Change slide function
function changeSlide(direction) {
  const newSlide = currentSlide + direction;

  // Ensure the newSlide is within the valid range
  if (newSlide >= 0 && newSlide < scrollContainer.children.length) {
    currentSlide = newSlide;
    updateSlidePosition();
  }
}

// Update slide position using CSS transform
function updateSlidePosition() {
  const offsetX = currentSlide * -slideWidth;
  scrollContainer.style.transform = `translateX(${offsetX}px)`;
}

const uploadInputEl = document.getElementById("uploadInput");
const dropAreaEl = document.getElementById("dropArea");
const uploadedFileContEl = document.getElementById("uploadedFileCont");
const uploadBtnContEl = document.getElementById("uploadBtnCont");
const browseBtnEl = document.getElementById("browseBtn");
const dropTextEl = document.getElementById("dropText");

dropAreaEl.addEventListener("dragover", dragOver);
dropAreaEl.addEventListener("dragleave", dragLeave);
dropAreaEl.addEventListener("drop", dropItem);
browseBtnEl.addEventListener("click", browseFile);
uploadInputEl.addEventListener("change", uploadFile);

let files = [];

function dragOver(e) {
  e.preventDefault();
  this.classList.add("content-over");
  dropTextEl.innerHTML = `Release to Upload files`;
}

function dragLeave(e) {
  e.preventDefault();
  this.classList.remove("content-over");
  dropTextEl.innerHTML = `Drag & Drop your files`;
}

function browseFile() {
  uploadInputEl.click();
}

function uploadFile() {
  let file = [...this.files];
  file.forEach((fl) => (fl.fileId = getRandomFileId()));
  dropFile(file);
}

function dropItem(e, currentFile) {
  e.preventDefault();
  currentFile = [...e.dataTransfer.files];
  currentFile.forEach((file) => (file.fileId = getRandomFileId()));
  dropFile(currentFile);
}

function dropFile(currentFile) {
  files.push(...currentFile);
  uploadedFileContEl.innerHTML = null;
  files.forEach((data) => createFileHolderEl(data));
}

function createFileHolderEl(file) {
  const uploadedFileEl = document.createElement("div");
  uploadedFileEl.classList.add("uploadedFile");

  // Filename
  const fileNameCont = document.createElement("div");
  fileNameCont.classList.add("fileName");

  const fileName = document.createElement("p");
  fileNameCont.appendChild(fileName);
  fileName.innerHTML = file.name; //
  uploadedFileEl.appendChild(fileNameCont);

  const closeBtn = document.createElement("div");
  closeBtn.classList.add("closeBtn");
  uploadedFileEl.appendChild(closeBtn);
  closeBtn.innerHTML = `<ion-icon name="close"></ion-icon>`;
  uploadedFileContEl.prepend(uploadedFileEl);
  closeBtn.addEventListener("click", (e) => {
    uploadedFileEl.remove();
    removeFile(file.fileId);
    if (!files.length) uploadBtnContEl.classList.remove("content-here");
  });
  if (files.length) uploadBtnContEl.classList.add("content-here");
  dropAreaEl.classList.remove("content-over");
  dropTextEl.innerHTML = `Drag & Drop your files`;
}

function getRandomFileId() {
  return Math.floor(Math.random() * 10000000).toString(16);
}

function removeFile(fileId) {
  return (files = files.filter((file) => file.fileId !== fileId));
}
